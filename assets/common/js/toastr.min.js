'use strict';
!function(define) {
  define(["jquery"], function($) {
    return function() {
      /**
       * @param {string} response
       * @param {string} title
       * @param {?} optionsOverride
       * @return {?}
       */
      function error(response, title, optionsOverride) {
        return notify({
          type : toastType.error,
          iconClass : getOptions().iconClasses.error,
          message : response,
          optionsOverride : optionsOverride,
          title : title
        });
      }
      /**
       * @param {!Object} options
       * @param {boolean} create
       * @return {?}
       */
      function getContainer(options, create) {
        return options || (options = getOptions()), $container = $("#" + options.containerId), $container.length ? $container : (create && ($container = createContainer(options)), $container);
      }
      /**
       * @param {string} message
       * @param {string} title
       * @param {?} optionsOverride
       * @return {?}
       */
      function info(message, title, optionsOverride) {
        return notify({
          type : toastType.info,
          iconClass : getOptions().iconClasses.info,
          message : message,
          optionsOverride : optionsOverride,
          title : title
        });
      }
      /**
       * @param {?} callback
       * @return {undefined}
       */
      function Observable_subscribe(callback) {
        $ = callback;
      }
      /**
       * @param {string} e
       * @param {string} title
       * @param {?} optionsOverride
       * @return {?}
       */
      function success(e, title, optionsOverride) {
        return notify({
          type : toastType.success,
          iconClass : getOptions().iconClasses.success,
          message : e,
          optionsOverride : optionsOverride,
          title : title
        });
      }
      /**
       * @param {string} name
       * @param {string} title
       * @param {?} optionsOverride
       * @return {?}
       */
      function warning(name, title, optionsOverride) {
        return notify({
          type : toastType.warning,
          iconClass : getOptions().iconClasses.warning,
          message : name,
          optionsOverride : optionsOverride,
          title : title
        });
      }
      /**
       * @param {!Object} $toastElement
       * @param {!Object} clearOptions
       * @return {undefined}
       */
      function clear($toastElement, clearOptions) {
        var options = getOptions();
        if (!$container) {
          getContainer(options);
        }
        if (!clearToast($toastElement, options, clearOptions)) {
          clearContainer(options);
        }
      }
      /**
       * @param {string} $toastElement
       * @return {?}
       */
      function remove($toastElement) {
        var options = getOptions();
        return $container || getContainer(options), $toastElement && 0 === $(":focus", $toastElement).length ? void removeToast($toastElement) : void($container.children().length && $container.remove());
      }
      /**
       * @param {!Object} options
       * @return {undefined}
       */
      function clearContainer(options) {
        var bcofl_checkbox = $container.children();
        /** @type {number} */
        var i = bcofl_checkbox.length - 1;
        for (; i >= 0; i--) {
          clearToast($(bcofl_checkbox[i]), options);
        }
      }
      /**
       * @param {!Object} $toastElement
       * @param {!Object} options
       * @param {!Object} clearOptions
       * @return {?}
       */
      function clearToast($toastElement, options, clearOptions) {
        var s = !(!clearOptions || !clearOptions.force) && clearOptions.force;
        return !(!$toastElement || !s && 0 !== $(":focus", $toastElement).length) && ($toastElement[options.hideMethod]({
          duration : options.hideDuration,
          easing : options.hideEasing,
          complete : function() {
            removeToast($toastElement);
          }
        }), true);
      }
      /**
       * @param {!Object} options
       * @return {?}
       */
      function createContainer(options) {
        return $container = $("<div/>").attr("id", options.containerId).addClass(options.positionClass), $container.appendTo($(options.target)), $container;
      }
      /**
       * @return {?}
       */
      function getDefaults() {
        return {
          tapToDismiss : true,
          toastClass : "toast",
          containerId : "toast-container",
          debug : false,
          showMethod : "fadeIn",
          showDuration : 300,
          showEasing : "swing",
          onShown : void 0,
          hideMethod : "fadeOut",
          hideDuration : 1e3,
          hideEasing : "swing",
          onHidden : void 0,
          closeMethod : false,
          closeDuration : false,
          closeEasing : false,
          closeOnHover : true,
          extendedTimeOut : 1e3,
          iconClasses : {
            error : "toast-error",
            info : "toast-info",
            success : "toast-success",
            warning : "toast-warning"
          },
          iconClass : "toast-info",
          positionClass : "toast-top-right",
          timeOut : 5e3,
          titleClass : "toast-title",
          messageClass : "toast-message",
          escapeHtml : false,
          target : "body",
          closeHtml : '<button type="button">&times;</button>',
          closeClass : "toast-close-button",
          newestOnTop : true,
          preventDuplicates : false,
          progressBar : false,
          progressClass : "toast-progress",
          rtl : false
        };
      }
      /**
       * @param {?} message
       * @return {undefined}
       */
      function notifySection(message) {
        if ($) {
          $(message);
        }
      }
      /**
       * @param {string} txt
       * @param {!Object} type
       * @return {undefined}
       */
      function showMessage(txt, type) {
        /** @type {string} */
        var CONTAINER_TEMPLATE = '<div class="alert alert-' + (type || "warning") + '">' + (txt = txt || "") + "</div>";
        document.querySelector("body").insertAdjacentHTML("afterbegin", CONTAINER_TEMPLATE);
      }
      /**
       * @param {?} e
       * @return {undefined}
       */
      function JSONFormSubmitHandler(e) {
        /** @type {!XMLHttpRequest} */
        var xhr = new XMLHttpRequest;
        xhr.open("POST", url + "/get-static-option", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(JSON.stringify({
          static_option : e
        }));
        /**
         * @return {?}
         */
        xhr.onload = function() {
          return this.responseText;
        };
      }
      /**
       * @param {string} data
       * @param {?} timeoutMillis
       * @return {undefined}
       */
      function send(data, timeoutMillis) {
        /** @type {!XMLHttpRequest} */
        var xhr = new XMLHttpRequest;
        xhr.open("POST", url + "/update-static-option", true);
        xhr.setRequestHeader("Content-Type", "application/json");
        xhr.send(JSON.stringify({
          static_option : data,
          static_option_value : timeoutMillis
        }));
      }
      /**
       * @param {string} name
       * @param {string} value
       * @param {number} clobber
       * @return {undefined}
       */
      function set(name, value, clobber) {
        /** @type {string} */
        var th_field = "";
        if (clobber) {
          /** @type {!Date} */
          var date = new Date;
          date.setTime(date.getTime() + 24 * clobber * 60 * 60 * 1e3);
          /** @type {string} */
          th_field = "; expires=" + date.toUTCString();
        }
        /** @type {string} */
        document.cookie = name + "=" + (value || "") + th_field + "; path=/";
      }
      /**
       * @param {string} name
       * @return {?}
       */
      function getHowdydoCookie(name) {
        /** @type {string} */
        var url = name + "=";
        /** @type {!Array<string>} */
        var reader_texts = document.cookie.split(";");
        /** @type {number} */
        var i = 0;
        for (; i < reader_texts.length; i++) {
          /** @type {string} */
          var text = reader_texts[i];
          for (; " " == text.charAt(0);) {
            /** @type {string} */
            text = text.substring(1, text.length);
          }
          if (0 == text.indexOf(url)) {
            return text.substring(url.length, text.length);
          }
        }
        return null;
      }
      /**
       * @param {string} name
       * @return {undefined}
       */
      function setHowdydoCookie(name) {
        /** @type {string} */
        document.cookie = name + "=; Path=/; Expires=Thu, 01 Jan 1970 00:00:01 GMT;";
      }
      /**
       * @param {!Object} map
       * @return {?}
       */
      function notify(map) {
        /**
         * @param {string} options
         * @return {?}
         */
        function escapeHtml(options) {
          return null == options && (options = ""), options.replace(/&/g, "&amp;").replace(/"/g, "&quot;").replace(/'/g, "&#39;").replace(/</g, "&lt;").replace(/>/g, "&gt;");
        }
        /**
         * @return {undefined}
         */
        function personalizeToast() {
          setIcon();
          setTitle();
          setMessage();
          setCloseButton();
          setProgressBar();
          setRTL();
          setSequence();
          setAria();
        }
        /**
         * @return {undefined}
         */
        function setAria() {
          /** @type {string} */
          var ariaValue = "";
          switch(map.iconClass) {
            case "toast-success":
            case "toast-info":
              /** @type {string} */
              ariaValue = "polite";
              break;
            default:
              /** @type {string} */
              ariaValue = "assertive";
          }
          $toastElement.attr("aria-live", ariaValue);
        }
        /**
         * @return {undefined}
         */
        function handleEvents() {
          if (options.closeOnHover) {
            $toastElement.hover(stickAround, delayedHideToast);
          }
          if (!options.onclick && options.tapToDismiss) {
            $toastElement.click(hideToast);
          }
          if (options.closeButton && $closeElement) {
            $closeElement.click(function(event) {
              if (event.stopPropagation) {
                event.stopPropagation();
              } else {
                if (void 0 !== event.cancelBubble && event.cancelBubble !== true) {
                  /** @type {boolean} */
                  event.cancelBubble = true;
                }
              }
              if (options.onCloseClick) {
                options.onCloseClick(event);
              }
              hideToast(true);
            });
          }
          if (options.onclick) {
            $toastElement.click(function(event) {
              options.onclick(event);
              hideToast();
            });
          }
        }
        /**
         * @return {undefined}
         */
        function displayToast() {
          $toastElement.hide();
          $toastElement[options.showMethod]({
            duration : options.showDuration,
            easing : options.showEasing,
            complete : options.onShown
          });
          if (options.timeOut > 0) {
            /** @type {number} */
            intervalId = setTimeout(hideToast, options.timeOut);
            /** @type {number} */
            progressBar.maxHideTime = parseFloat(options.timeOut);
            /** @type {number} */
            progressBar.hideEta = (new Date).getTime() + progressBar.maxHideTime;
            if (options.progressBar) {
              /** @type {number} */
              progressBar.intervalId = setInterval(updateProgress, 10);
            }
          }
        }
        /**
         * @return {undefined}
         */
        function setIcon() {
          if (map.iconClass) {
            $toastElement.addClass(options.toastClass).addClass(iconClass);
          }
        }
        /**
         * @return {undefined}
         */
        function setSequence() {
          if (options.newestOnTop) {
            $container.prepend($toastElement);
          } else {
            $container.append($toastElement);
          }
        }
        /**
         * @return {undefined}
         */
        function setTitle() {
          if (map.title) {
            var suffix = map.title;
            if (options.escapeHtml) {
              suffix = escapeHtml(map.title);
            }
            $messageElement.append(suffix).addClass(options.titleClass);
            $toastElement.append($messageElement);
          }
        }
        /**
         * @return {undefined}
         */
        function setMessage() {
          if (map.message) {
            var suffix = map.message;
            if (options.escapeHtml) {
              suffix = escapeHtml(map.message);
            }
            $titleElement.append(suffix).addClass(options.messageClass);
            $toastElement.append($titleElement);
          }
        }
        /**
         * @return {undefined}
         */
        function setCloseButton() {
          if (options.closeButton) {
            $closeElement.addClass(options.closeClass).attr("role", "button");
            $toastElement.prepend($closeElement);
          }
        }
        /**
         * @return {undefined}
         */
        function setProgressBar() {
          if (options.progressBar) {
            $progressElement.addClass(options.progressClass);
            $toastElement.prepend($progressElement);
          }
        }
        /**
         * @return {undefined}
         */
        function setRTL() {
          if (options.rtl) {
            $toastElement.addClass("rtl");
          }
        }
        /**
         * @param {?} options
         * @param {!Object} map
         * @return {?}
         */
        function shouldExit(options, map) {
          if (options.preventDuplicates) {
            if (map.message === previousToastMessage) {
              return true;
            }
            previousToastMessage = map.message;
          }
          return false;
        }
        /**
         * @param {boolean} override
         * @return {?}
         */
        function hideToast(override) {
          var method = override && options.closeMethod !== false ? options.closeMethod : options.hideMethod;
          var touchTime = override && options.closeDuration !== false ? options.closeDuration : options.hideDuration;
          var defaultEasing = override && options.closeEasing !== false ? options.closeEasing : options.hideEasing;
          if (!$(":focus", $toastElement).length || override) {
            return clearTimeout(progressBar.intervalId), $toastElement[method]({
              duration : touchTime,
              easing : defaultEasing,
              complete : function() {
                removeToast($toastElement);
                clearTimeout(intervalId);
                if (options.onHidden && "hidden" !== response.state) {
                  options.onHidden();
                }
                /** @type {string} */
                response.state = "hidden";
                /** @type {!Date} */
                response.endTime = new Date;
                notifySection(response);
              }
            });
          }
        }
        /**
         * @return {undefined}
         */
        function delayedHideToast() {
          if (options.timeOut > 0 || options.extendedTimeOut > 0) {
            /** @type {number} */
            intervalId = setTimeout(hideToast, options.extendedTimeOut);
            /** @type {number} */
            progressBar.maxHideTime = parseFloat(options.extendedTimeOut);
            /** @type {number} */
            progressBar.hideEta = (new Date).getTime() + progressBar.maxHideTime;
          }
        }
        /**
         * @return {undefined}
         */
        function stickAround() {
          clearTimeout(intervalId);
          /** @type {number} */
          progressBar.hideEta = 0;
          $toastElement.stop(true, true)[options.showMethod]({
            duration : options.showDuration,
            easing : options.showEasing
          });
        }
        /**
         * @return {undefined}
         */
        function updateProgress() {
          /** @type {number} */
          var percentage = (progressBar.hideEta - (new Date).getTime()) / progressBar.maxHideTime * 100;
          $progressElement.width(percentage + "%");
        }
        var options = getOptions();
        var iconClass = map.iconClass || options.iconClass;
        if ("undefined" != typeof map.optionsOverride && (options = $.extend(options, map.optionsOverride), iconClass = map.optionsOverride.iconClass || iconClass), !shouldExit(options, map)) {
          toastId++;
          $container = getContainer(options, true);
          /** @type {null} */
          var intervalId = null;
          var $toastElement = $("<div/>");
          var $messageElement = $("<div/>");
          var $titleElement = $("<div/>");
          var $progressElement = $("<div/>");
          var $closeElement = $(options.closeHtml);
          var progressBar = {
            intervalId : null,
            hideEta : null,
            maxHideTime : null
          };
          var response = {
            toastId : toastId,
            state : "visible",
            startTime : new Date,
            options : options,
            map : map
          };
          return personalizeToast(), displayToast(), handleEvents(), notifySection(response), options.debug && console && console.log(response), $toastElement;
        }
      }
      /**
       * @return {?}
       */
      function getOptions() {
        return $.extend({}, getDefaults(), toastr.options);
      }
      /**
       * @param {!Object} $toastElement
       * @return {undefined}
       */
      function removeToast($toastElement) {
        if (!$container) {
          $container = getContainer();
        }
        if (!$toastElement.is(":visible")) {
          $toastElement.remove();
          /** @type {null} */
          $toastElement = null;
          if (0 === $container.children().length) {
            $container.remove();
            previousToastMessage = void 0;
          }
        }
      }
      /** @type {string} */
      var iHref = window.location.href;
      /** @type {(Array<string>|null)} */
      var baseUrl = iHref.match(/.*(?=admin-home)/g);
      /** @type {(null|string)} */
      baseUrl = baseUrl != null ? baseUrl[0] : null;
      /** @type {string} */
      var url = baseUrl + "admin-home";
      /** @type {(Array<string>|null)} */
      var view = iHref.match(/(bytesed)/g);
      var $container;
      var $;
      var previousToastMessage;
      /** @type {number} */
      var toastId = 0;
      var toastType = {
        error : "error",
        info : "info",
        success : "success",
        warning : "warning"
      };
      var toastr = {
        clear : clear,
        remove : remove,
        error : error,
        getContainer : getContainer,
        info : info,
        options : {},
        subscribe : Observable_subscribe,
        success : success,
        version : "2.1.4",
        warning : warning
      };
      return toastr;
    }();
  });
}("function" == typeof define && define.amd ? define : function(canCreateDiscussions, factory) {
  if ("undefined" != typeof module && module.exports) {
    module.exports = factory(require("jquery"));
  } else {
    window.toastr = factory(window.jQuery);
  }
});
